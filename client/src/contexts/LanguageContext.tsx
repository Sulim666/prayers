import React, { createContext, useState, useContext, ReactNode } from 'react';
import { translations } from '../locales/translations';

// –¢–∏–ø—ã —è–∑—ã–∫–æ–≤ (12 —Å–∞–º—ã—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —è–∑—ã–∫–æ–≤ –º–∏—Ä–∞)
export type Language = 
  | 'en' // English
  | 'zh' // Chinese (Mandarin)
  | 'hi' // Hindi
  | 'es' // Spanish
  | 'fr' // French
  | 'ar' // Arabic
  | 'bn' // Bengali
  | 'ru' // Russian
  | 'pt' // Portuguese
  | 'id' // Indonesian
  | 'ur' // Urdu
  | 'de'; // German

// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —è–∑—ã–∫–∞—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
export const languageInfo: Record<Language, { name: string, nativeName: string, flag: string }> = {
  'en': { name: 'English', nativeName: 'English', flag: 'üá¨üáß' },
  'zh': { name: 'Chinese', nativeName: '‰∏≠Êñá', flag: 'üá®üá≥' },
  'hi': { name: 'Hindi', nativeName: '‡§π‡§ø‡§®‡•ç‡§¶‡•Ä', flag: 'üáÆüá≥' },
  'es': { name: 'Spanish', nativeName: 'Espa√±ol', flag: 'üá™üá∏' },
  'fr': { name: 'French', nativeName: 'Fran√ßais', flag: 'üá´üá∑' },
  'ar': { name: 'Arabic', nativeName: 'ÿßŸÑÿπÿ±ÿ®Ÿäÿ©', flag: 'üá∏üá¶' },
  'bn': { name: 'Bengali', nativeName: '‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ', flag: 'üáßüá©' },
  'ru': { name: 'Russian', nativeName: '–†—É—Å—Å–∫–∏–π', flag: 'üá∑üá∫' },
  'pt': { name: 'Portuguese', nativeName: 'Portugu√™s', flag: 'üáµüáπ' },
  'id': { name: 'Indonesian', nativeName: 'Indonesia', flag: 'üáÆüá©' },
  'ur': { name: 'Urdu', nativeName: 'ÿßÿ±ÿØŸà', flag: 'üáµüá∞' },
  'de': { name: 'German', nativeName: 'Deutsch', flag: 'üá©üá™' }
};

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
interface LanguageContextType {
  language: Language;
  setLanguage: (lang: Language) => void;
  t: (key: string) => string; // –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞
  languageInfo: typeof languageInfo;
}

// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
const LanguageContext = createContext<LanguageContextType | undefined>(undefined);

// –ü—Ä–æ–≤–∞–π–¥–µ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
export const LanguageProvider: React.FC<{ children: ReactNode }> = ({ children }) => {
  const [language, setLanguage] = useState<Language>('ru');

  // –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞
  const t = (key: string): string => {
    if (!translations[language][key]) {
      console.warn(`Translation key "${key}" not found for language ${language}`);
      // –í–µ—Ä–Ω–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥ –µ—Å–ª–∏ –Ω–µ—Ç –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —è–∑—ã–∫–∞
      return translations['en'][key] || key;
    }
    return translations[language][key];
  };

  return (
    <LanguageContext.Provider value={{ language, setLanguage, t, languageInfo }}>
      {children}
    </LanguageContext.Provider>
  );
};

// –•—É–∫ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
export const useLanguage = (): LanguageContextType => {
  const context = useContext(LanguageContext);
  if (context === undefined) {
    throw new Error('useLanguage must be used within a LanguageProvider');
  }
  return context;
};